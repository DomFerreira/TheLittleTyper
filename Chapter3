#lang pie
;; Exercise 1
(claim at-least-two?
  (-> Nat Atom))  ;; Declare the type: takes a Nat and returns an Atom

(define at-least-two?
  (lambda (n)
    (which-Nat n
      'nil ;; If n = 0, return 'nil
      (lambda (n-1)
        (which-Nat n-1
          'nil ;; If n = 1, return 'nil
          (lambda (n-2) 't)))))) ;; If n â‰¥ 2, return 't

;; Exercise 2
(claim +
  (-> Nat Nat Nat))  ;; Declare type: takes two Nats and returns a Nat

(define +
  (lambda (n j)
    (rec-Nat n
      j ;; Base case: when 'n' is zero, return 'j'.
      (lambda (n-1 sum-n-1) ;; Recursive step: 'n-1' is the predecessor of 'n',
        (add1 sum-n-1))))) ;; and 'sum-n-1' is the result of adding 'n-1' and 'j';
;; increment it by 1 to get the sum of 'n' and 'j'.

;; Exercise 3
(claim *
  (-> Nat Nat Nat))  ;; Declare type: takes two Nats and returns a Nat

(define *
  (lambda (n j)
    (rec-Nat n
      0  ;; Base case: anything times 0 is 0
      (lambda (n-1 prod-n-1)
        (+ j prod-n-1)))))  ;; Add j, n times

(claim ^
  (-> Nat Nat Nat))  ;; Declare type: takes two Nats and returns a Nat

(define ^
  (lambda (a b)
    (rec-Nat b
      1
      (lambda (b-1 exp-a-b-1)
        (* a exp-a-b-1)))))

;; Exercise 4
;; plus :: Nat -> Nat -> Nat
(claim plus (-> Nat Nat Nat))
(define plus
  (lambda (n j)
    (rec-Nat n
      j
      (lambda (n-1 sum) (add1 sum)))))

;; pred :: Nat -> Nat
(claim pred (-> Nat Nat))
(define pred
  (lambda (n)
    (which-Nat n
      0
      (lambda (n-1) n-1))))

;; minus :: Nat -> Nat -> Nat
;; minus a b returns a - b if a â‰¥ b, and 0 otherwise.
(claim - (-> Nat Nat Nat))
(define -
  (lambda (a b)
    (rec-Nat b
      a
      (lambda (b-1 diff)
        (which-Nat diff
          0
          (lambda (x) (pred diff)))))))

;; max :: Nat -> Nat -> Nat, defined as b + (a - b)
(claim max (-> Nat Nat Nat))
(define max
  (lambda (a b)
    (plus b (- a b))))


;; Exercise 5

;; Exercise 6
(claim step-fact
  (-> Nat Nat Nat))

(define step-fact
  (lambda (n-1 almost)
    (* (add1 n-1) almost)))

(claim fact
  (-> Nat Nat))

(define fact
  (lambda (n)
    (rec-Nat n
      1
      step-fact)))
